#include "ibdcs.h"
#include "tmcibtms.h"
#include <unistd.h>
static int gs_myFid = -1;

static char   *g_pcBcdaShmPtr;

static void TransRcvSvrExit(int signo)
{
    if(signo > 0)
        dcs_log(0,0,"catch a signal %d\n",signo);
    if(signo !=0 && signo != SIGTERM && signo != SIGSEGV)
        return;

    dcs_log(0,0,"AppServer terminated.\n");
    shm_detach((char *)g_pcBcdaShmPtr);
    exit(signo);
}

static int OpenLog()
{
    char path[500];
    char file[520];
    memset(path,0,sizeof(path));
    memset(file,0,sizeof(file));
    getcwd(path,500);
    sprintf(file,"%s/moniEwp.log",path);
    return dcs_log_open(file, "moniEwp");
}
/*
模拟EWP消费报文，即订单支付报文
*/
int main(int argc, char *argv[])
{
 	struct  tm *tm;
	time_t  t;
	char    *ltime;
	char tmpbuf[100],buffer[1024];
	int s = 0;
    	int fid;
	memset(tmpbuf,0,sizeof(tmpbuf));
	memset(buffer,0,sizeof( buffer ) );

	printf("do a tests=%d",s);
	s = OpenLog();
	if(s < 0)
        exit(1);

	dcs_log(0,0,"模拟EWP消费报文，即订单支付报文 start");

	time(&t);
    tm = localtime(&t);
    ltime = ctime(&t);

    sprintf(tmpbuf,"%02d%02d", tm->tm_mon+1,tm->tm_mday);
    memcpy(tmpbuf+4, ltime+11, 2);
    memcpy(tmpbuf+6, ltime+14, 2);
    memcpy(tmpbuf+8, ltime+17, 2);

	DataFromEWP(buffer);
	//DataFromMPOS_yindian(buffer);
//	DataFromMPOS(buffer);
	dcs_log( 0, 0, "ewp data return[%d]:%s.", strlen(buffer), buffer );


	dcs_log( 0, 0, "ewp data return:[%s]",  buffer );

    if(fold_initsys() < 0)
    {
        dcs_log(0,0, "cannot attach to folder system!");
        return -1;
    }

    dcs_log(0,0, "attach to folder system ok !\n");

 //   gs_myFid = fold_locate_folder("TRANSRCV");
	 gs_myFid = fold_locate_folder("TRANSRCV");

	if(gs_myFid < 0)
    {
        dcs_log(0,0,"cannot get folder '%s':%s\n", "TRANSRCV", ise_strerror(errno) );
        return -1;
    }

    dcs_log(0,0, "folder myFid=%d", gs_myFid);

//		fid = fold_locate_folder("EWP_COM");

//	if(fid < 0)
//   {
//        dcs_log(0,0,"cannot get folder '%s':%s\n", "EWP_COM", ise_strerror(errno) );
//        return -1;
//    }

//   dcs_log(0,0, "link folder fid=%d", fid);

	fold_write(gs_myFid,fid,buffer, strlen(buffer) );

	dcs_log( 0,0, "Write finished,Write length =%d",s);

	TransRcvSvrExit(0);

	exit(0);
}

int getstrlen(char * StrBuf)
{
	int	i, j = 0;
	char tmpbuf[1024];

	memset(tmpbuf, 0, sizeof(tmpbuf));

	for(i=0; i<1024; i++)
	{
		if( (StrBuf[i] == 0x20) || (StrBuf[i] == 0x00) ) break;
		tmpbuf[j] = StrBuf[i];
		j ++ ;
	}

	return j;
}

/* 模拟从EWP过来的数据 */

int DataFromEWP(char *buffer)
{
	char tmpbuf[256];
	struct  tm *tm;   time_t  t;
    time(&t);
    tm = localtime(&t);
	int num;

	sprintf( buffer, "%s", "MPOS");   /*4个字节的报文类型数据*/
	sprintf( buffer, "%s%s",buffer, "0200");   /*4个字节的交易类型数据*/
	sprintf( buffer, "%s%s",buffer, "200000");   /*6个字节的交易处理码*/
	sprintf(tmpbuf,"%04d%02d%02d",tm->tm_year+1900,tm->tm_mon+1,tm->tm_mday);
	sprintf( buffer, "%s%s",buffer, tmpbuf);   /*8个字节  接入系统发送交易的日期*/
	memset(tmpbuf,0,sizeof(tmpbuf));
	sprintf(tmpbuf,"%02d%02d%02d",tm->tm_hour,tm->tm_min,tm->tm_sec);
	sprintf( buffer, "%s%s",buffer, tmpbuf);   /*6个字节  接入系统发送交易的时间*/
	sprintf( buffer, "%s%s",buffer, "0100");   /*4个字节  接入系统的编号EWP：0100 sk EWP 0400*/
	sprintf( buffer, "%s%s",buffer, "108");   /*3个字节  交易码 区分业务类型订单支付：210  200老板收款*/
	sprintf( buffer, "%s%s" ,buffer, "1");/*交易发起方式 1:pos支付 skEWP: 2*/
	//sprintf( buffer,"%s%s",buffer,"CADE000012345678");
	sprintf( buffer,"%s%s",buffer,"0DF0110030000002");
	memset(tmpbuf,0,sizeof(tmpbuf));
	sprintf(tmpbuf,"%s%02d%02d%02d","MOBILEIMEI",tm->tm_hour,tm->tm_min,tm->tm_sec);
	sprintf(buffer,"%s%-20s",buffer,tmpbuf);/*20个字节 手机编号IMEI左对齐 不足补空格*/
	sprintf( buffer,"%s%s",buffer,"15026513236");/*11个字节 手机号，例如：15026513236*/
	memset(tmpbuf,0,sizeof(tmpbuf));
	sprintf(tmpbuf,"%s%02d%02d%02d%02d%02d","ORDERNO",tm->tm_mon+1,tm->tm_mday,tm->tm_hour,tm->tm_min,tm->tm_sec);
	sprintf(buffer,"%s%-20s",buffer,tmpbuf);
	num=524;
	sprintf(buffer,"%s%020d",buffer,num);/*20个字节商户编号 不足左补空格*/
	sprintf(buffer, "%-19s", "621444100001003016");
	num =200000;
	sprintf(buffer,"%s%012d",buffer,num);/*12个字节 金额 右对齐 不足补0*/
	num =200;
	sprintf(buffer,"%s%012d",buffer,"200");/*12个字节 优惠金额 右对齐 不足0*/
	//sprintf( buffer,"%s%-160s",buffer,"D7E2636B605A14278596BCD7877B19DFA2309AF2141C8AE42466118C25D54E548E3B29E20C2C821748BB41114500397F1B41EF750A050DFE9C9D9BA81764B25625DD7C5D3AB2D8B2C4145B4825E8EEF1");
	sprintf( buffer,"%s%-160s",buffer,"72FBA9BE5416224A3FC09548DEB57101");
	//sprintf( buffer,"%s%s",buffer,"4321432143214321");/*16个字节的磁道密钥随机数*/
	sprintf( buffer,"%s%s",buffer,"CD6FF07F2C11A821");/*16个字节的磁道密钥随机数*/
	//sprintf( buffer,"%s%s",buffer,"DF3C3D60764B2BF6");
	sprintf( buffer,"%s%s",buffer,"5BFDECA98E2DCE34");
	//sprintf( buffer,"%s%s",buffer,"1234123412341234");/*16个字节pin密钥随机数*/
	sprintf( buffer,"%s%s",buffer,"52CFAD07B4EEBB08");/*16个字节pin密钥随机数*/
	sprintf( buffer,"%s%s",buffer,"0");/*是否发短信的标记*/
	sprintf( buffer,"%s%s",buffer,"selfdefineselfdefine");/*20个字节的自定义域*/
	return 0;
}

int DataFromMPOS(char *buffer)
{
	char tmpbuf[256];
	struct  tm *tm;   time_t  t;
    time(&t);
    tm = localtime(&t);
	int num;

	memset(buffer, 0x00, sizeof(buffer));

	sprintf( buffer, "%s", "H3CP");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	sprintf( buffer, "%s%s", buffer, "12345");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//交易类型    4
	sprintf( buffer, "%s%s",buffer, "0200");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//交易处理码    6
	sprintf( buffer, "%s%s",buffer, "200000");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//发送日期    8
	sprintf(tmpbuf,"%04d%02d%02d",tm->tm_year+1900,tm->tm_mon+1,tm->tm_mday);
	sprintf( buffer, "%s%s",buffer, tmpbuf);
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//发送时间    6
	memset(tmpbuf,0,sizeof(tmpbuf));
	sprintf(tmpbuf,"%02d%02d%02d",tm->tm_hour,tm->tm_min,tm->tm_sec);
	sprintf( buffer, "%s%s",buffer, tmpbuf);
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//发送机构号    4
	sprintf( buffer, "%s%s",buffer, "0100");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//交易码    3
	sprintf( buffer, "%s%s",buffer, "0M4");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//交易发起方式    1
	sprintf( buffer, "%s%s" ,buffer, "1");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//KSN编号    16
	sprintf( buffer,"%s%s",buffer,"0DF0110030000002");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//机具编号    20
	sprintf(buffer,"%s%-20s", buffer, "D1GS74DJ00001       ");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//用户名    11
	sprintf( buffer,"%s%s",buffer, "SJ000095900");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//订单号    20
	sprintf(buffer,"%s%s", buffer, "MV1501291107000013DA");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//商户编号    20
	num=413;
	sprintf(buffer,"%s%020d",buffer,num);
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//转出卡号    19
	sprintf(buffer,"%s%s", buffer, "6214441000010038   ");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//密码    16
	sprintf(buffer,"%s%s", buffer, "7acf1737bf98fcb8");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//密码随机数    16
	sprintf(buffer,"%s%s", buffer, "7acf1737bf98fcb8");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//原交易订单号    20
	sprintf(buffer, "%s%s", buffer, "MV1501281730000343UA");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//原交易发起日期和时间    14
	sprintf(buffer, "%s%s", buffer, "20150129110743");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//MAC    8
	sprintf(buffer, "%s%s", buffer, "96E00E06");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

/*
	//优惠金额    12
	num =200;
	sprintf(buffer,"%s%012d",buffer,"200");

	//金额    12
	num =200;
	sprintf(buffer,"%s%012d",buffer,"200");

	//磁道    160
	sprintf( buffer,"%s%-160s",buffer,"D7E2636B605A14278596BCD7877B19DFA2309AF2141C8AE42466118C25D54E548E3B29E20C2C821748BB41114500397F1B41EF750A050DFE9C9D9BA81764B25625DD7C5D3AB2D8B2C4145B4825E8EEF1");

	//磁道密钥随机数    16
	sprintf( buffer,"%s%s",buffer,"4321432143214321");

	//密码    16
	sprintf( buffer,"%s%s",buffer,"DF3C3D60764B2BF6");

	//Pik密钥随机数    16
	sprintf( buffer,"%s%s",buffer,"1234123412341234");

	//是否需要发送短信标识    1
	sprintf( buffer,"%s%s",buffer,"0");

	//自定义域    20
	sprintf( buffer,"%s%s",buffer,"selfdefineselfdefine");
*/

	return 0;
}



int DataFromMPOS_yindian(char *buffer)
{
	char tmpbuf[256];
	struct  tm *tm;   time_t  t;
    time(&t);
    tm = localtime(&t);
	int num;

	memset(buffer, 0x00, sizeof(buffer));

	sprintf( buffer, "%s", "H3CP");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	sprintf( buffer, "%s%s", buffer, "12345");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	sprintf(buffer,"%s%s", buffer, "6222600110049712230");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//KSN   8
	sprintf(buffer,"%s%s", buffer, "FFFFFFFFFFFFFF000004");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//macblk  32  BCD
	memset(tmpbuf, 0, sizeof(tmpbuf));
	asc_to_bcd((unsigned char *)tmpbuf, "3131313131313131313131313131313131313131313131313131313131313131", 64, 0);
	sprintf(buffer,"%s%s", buffer, tmpbuf);
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//mac
	sprintf(buffer, "%s%s", buffer,"3407E7A0");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//磁道	160
	sprintf(buffer,"%s%s",buffer, "D7E2636B605A14278596BCD7877B19DFA2309AF2141C8AE42466118C25D54E548E3B29E20C2C821748BB41114500397F1B41EF750A050DFE9C9D9BA81764B25625DD7C5D3AB2D8B2C4145B4825E8EEF1");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//密码明文    6
	sprintf( buffer, "%s%s",buffer, "123456");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	//密码密文    16
	sprintf( buffer, "%s%s",buffer, "7ACF1737BF98FCB8");
	dcs_log(0, 0, "BUFFER[%s]",buffer);

	return 0;
}
